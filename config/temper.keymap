/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include "layers.conf"
#include "macros.conf"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
macros {
        LOG_AND: LOG_AND {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp AMPS &kp AMPS>;
        };

        LOG_OR: LOG_OR {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp PIPE &kp PIPE>;
        };

        INCLUDE: INCLUDE {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp I &kp N &kp C &kp L &kp U &kp D &kp E &kp DQT &kp DQT &kp LEFT>;
        };

        ARROW_OP: ARROW_OP {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp MINUS &kp GT>;
        };

        ARROW_FN: ARROW_FN {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp EQUAL &kp GT>;
        };

        DBL_QT: DBL_QT {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp DQT &kp DQT &kp LEFT>;
        };

        LSFT_OP: LSFT_OP {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp LT &kp LT>;
        };

        RSFT_OP: RSFT_OP {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp GT &kp GT>;
        };

        UPROPERTY: UPROPERTY {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp LS(U) &kp LS(P) &kp LS(R) &kp LS(O) &kp LS(P) &kp LS(E) &kp LS(R) &kp LS(T) &kp LS(Y) &kp LPAR &kp RPAR &kp LEFT>;
        };

        UFUNCTION: UFUNCTION {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp LS(U) &kp LS(F) &kp LS(U) &kp LS(N) &kp LS(C) &kp LS(T) &kp LS(I) &kp LS(O) &kp LS(N) &kp LPAR &kp RPAR &kp LEFT>,
                <&macro_press>;
        };

        DBL_EQL: DBL_EQL {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp EQUAL &kp EQUAL>;
        };

        TRPL_EQL: TRPL_EQL {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp EQUAL &kp EQUAL &kp EQUAL>;
        };

        NOT_EQL: NOT_EQL {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp EXCL &kp EQUAL>;
        };

        GT_EQL: GT_EQL {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp GT &kp EQUAL>;
        };

        LT_EQL: LT_EQL {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp LT &kp EQUAL>;
        };

        PRN: PRN {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp LPAR &kp RPAR &kp LEFT>;
        };

        BRC: BRC {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp LBRC &kp RBRC &kp LEFT>;
        };

        BKT: BKT {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp LBKT &kp RBKT &kp LEFT>;
        };

        ANGL: ANGL {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp LT &kp GT &kp LEFT>;
        };

        INC: INC {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp PLUS &kp PLUS>;
        };

        DEC: DEC {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp MINUS &kp MINUS>;
        };
    };
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        kp_sl: behavior_kp_sl {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&sl>, <&kp>;
        };

        ht: behavior_hold_tap_key {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <300>;
            bindings = <&kp>, <&kp>;
        };

        bspc_del: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_RSFT)>;
        };

        super_bspc: super_backspace {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp LA(BACKSPACE)>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        smart_shft: smart_shift {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LSHFT>, <&caps_word>;

            mods = <(MOD_LSFT)>;
        };

        comma_semi: comma_semi {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMI>;

            mods = <(MOD_LSFT)>;
        };

        dot_colon: dot_colon {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp COLON>;

            mods = <(MOD_LSFT)>;
        };

        qmrk_excl: qmrk_excl {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp QMARK>, <&kp EXCL>;

            mods = <(MOD_LSFT)>;
        };

        slh_morph: slh_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp FSLH>, <&kp BSLH>;

            mods = <(MOD_LSFT)>;
        };

        amps_morph: amps_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp AMPS>, <&kp PIPE>;

            mods = <(MOD_LSFT)>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        settings_trigger {
            if-layers = <1 4>;
            then-layer = <6>;
        };
    };

    combos { compatible = "zmk,combos"; };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "Alpha";
            bindings = <
  &kp Q        &kp W        &kp F                    &kp P          &kp B            &kp J              &kp L           &kp U        &kp Y       &kp SEMICOLON
  &hm LGUI A   &hm LALT R   &hm LSHFT S              &hm LCTRL T    &kp G            &kp M              &hm RCTRL N     &hm RSHFT E  &hm LALT I  &hm RGUI O
  &mt LC(Z) X  &mt LC(X) F  &mt LC(C) C              &mt LC(V) D    &kp V            &kp K              &kp H           &kp COMMA    &kp PERIOD  &kp SLASH
                            &ht LEFT_SHIFT LEFT_WIN  &lt SYM ENTER  &lt NUMFN TAB    &lt NAV BACKSPACE  &lt UTIL SPACE  &sl 3
            >;
        };

        nav_layer {
            display-name = "Nav";
            bindings = <
  &trans           &trans  &trans  &trans       &trans    &trans  &trans    &kp UP     &trans     &trans
  &kp LC(LS(TAB))  &trans  &trans  &kp LC(TAB)  &trans    &trans  &kp LEFT  &kp DOWN   &kp RIGHT  &trans
  &trans           &trans  &trans  &trans       &trans    &trans  &kp HOME  &kp PG_DN  &kp PG_UP  &kp END
                           &trans  &trans       &trans    &trans  &trans    &trans
            >;
        };

        sym_layer {
            display-name = "Sym";
            bindings = <
  &kp AT     &kp HASH  &kp DLLR  &kp PRCNT  &kp UNDER    &kp CARET  &kp AMPS  &kp STAR  &kp COLON  &kp SEMI
  &kp EQUAL  &kp APOS  &kp DQT   &kp GRAVE  &kp MINUS    &kp BSLH   &kp LPAR  &kp RPAR  &kp LBRC   &kp RBRC
  &kp TILDE  &none     &none     &none      &none        &kp PIPE   &kp LBKT  &kp RBKT  &kp LT     &kp GT
                       &trans    &trans     &trans       &trans     &trans    &trans
            >;
        };

        prog_sym_layer {
            display-name = "Prog Sym";
            bindings = <
  &DBL_EQL  &TRPL_EQL  &NOT_EQL  &GT_EQL  &trans    &trans  &LOG_AND   &LOG_OR    &INCLUDE    &trans
  &PRN      &BRC       &BKT      &ANGL    &trans    &trans  &ARROW_OP  &ARROW_FN  &DBL_QT     &trans
  &DEC      &INC       &trans    &trans   &trans    &trans  &LSFT_OP   &RSFT_OP   &UPROPERTY  &UFUNCTION
                       &trans    &trans   &trans    &trans  &trans     &trans
            >;
        };

        //                qwerty_layer {
        //                        bindings = <
        // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
        //        &kp Q         &kp W         &kp E         &kp R         &kp T              &kp Y        &kp U         &kp I         &kp O         &kp P   
        // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
        //        &kp A         &kp S         &kp D         &kp F         &kp G              &kp H        &kp J         &kp K         &kp L       &kp SEMI
        // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
        //        &kp Z         &kp X         &kp C         &kp V         &kp B              &kp N        &kp M       &kp COMMA      &kp DOT      &kp FSLH
        // ╰─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────╯
        //                                    &trans        &trans        &trans             &trans       &trans        &trans
        //                             ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
        //                        >;
        //                };

        numfn_layer {
            display-name = "Num/FN";
            bindings = <
  &kp F9  &kp F10  &kp F11  &kp F12  &trans    &kp SLASH  &kp N7  &kp N8  &kp N9  &kp MINUS
  &kp F5  &kp F6   &kp F7   &kp F8   &trans    &kp STAR   &kp N4  &kp N5  &kp N6  &kp PLUS
  &kp F1  &kp F2   &kp F3   &kp F4   &trans    &trans     &kp N1  &kp N2  &kp N3  &kp EQUAL
                   &trans   &trans   &trans    &kp N0     &trans  &trans
            >;
        };

        util_layer {
            display-name = "Util";
            bindings = <
  &studio_unlock  &trans         &kp KP_NUMLOCK  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans          &trans         &trans          &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans          &kp LG(LS(S))  &kp DEL         &trans  &trans    &trans  &trans  &trans  &trans  &trans
                                 &trans          &trans  &trans    &trans  &trans  &trans
            >;
        };

        settings_layer {
            display-name = "Settings";
            bindings = <
  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4      &trans  &trans  &kp K_SLEEP  &kp C_SLEEP_MODE  &kp C_SLEEP
  &bootloader   &trans        &trans        &trans        &bt BT_CLR_ALL    &trans  &trans  &trans       &trans            &trans
  &trans        &trans        &trans        &trans        &bt BT_CLR        &trans  &trans  &trans       &trans            &soft_off
                              &trans        &trans        &trans            &trans  &trans  &trans
            >;
        };

        //                fun_layer {
        //                        bindings = <
        // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
        //     &tog QWERTY   &kp K_MUTE    &kp C_VOL_DN  &kp C_VOL_UP  &out OUT_TOG         &trans        &kp F7        &kp F8        &kp F9       &kp F12
        // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
        //     &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4         &trans        &kp F4        &kp F5        &kp F6       &kp F11
        // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
        //      &bt BT_CLR    &kp C_PREV     &kp C_PP     &kp C_NEXT      &trans            &trans        &kp F1        &kp F2        &kp F3       &kp F10
        // ╰─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────╯
        //                                    &trans        &trans        &trans            &trans        &trans        &trans
        //                             ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
        //                        >;
        //                };
    };
};
